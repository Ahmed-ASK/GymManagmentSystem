// <auto-generated />
using System;
using GymManagementDAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManagementDAL.Migrations
{
    [DbContext(typeof(GymDbContext))]
    partial class GymDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymManagementDAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Health.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Hight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("GymManagementDAL.Entities.MemberSession", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("BookingDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsAttended")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberSessions");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Membership", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "PlanId");

                    b.HasIndex("PlanId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<short>("DurationDays")
                        .HasColumnType("SMALLINT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Plans", t =>
                        {
                            t.HasCheckConstraint("PlanDurationDaysChack", "DurationDays between 1 and 365");
                        });
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CategrotyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategrotyId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Sessions", t =>
                        {
                            t.HasCheckConstraint("SessionCapacityCheck", "Capacity Between 1 and 25");

                            t.HasCheckConstraint("SessionEndDateCheck", "EndDate > StartDate");
                        });
                });

            modelBuilder.Entity("GymManagementDAL.Entities.User.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("JoinDate");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Members", t =>
                        {
                            t.HasCheckConstraint("GymUserValidEmailCheck", "Email Like '_%@%._%'");

                            t.HasCheckConstraint("GymUserValidPhoneCheck", "Phone Like '01%' and phone not like '%[^0-9]%'");
                        });
                });

            modelBuilder.Entity("GymManagementDAL.Entities.User.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("HireDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Specialities")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Trainers", t =>
                        {
                            t.HasCheckConstraint("GymUserValidEmailCheck", "Email Like '_%@%._%'")
                                .HasName("GymUserValidEmailCheck1");

                            t.HasCheckConstraint("GymUserValidPhoneCheck", "Phone Like '01%' and phone not like '%[^0-9]%'")
                                .HasName("GymUserValidPhoneCheck1");
                        });
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Health.HealthRecord", b =>
                {
                    b.HasOne("GymManagementDAL.Entities.User.Member", null)
                        .WithOne("HealthRecord")
                        .HasForeignKey("GymManagementDAL.Entities.Health.HealthRecord", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagementDAL.Entities.MemberSession", b =>
                {
                    b.HasOne("GymManagementDAL.Entities.User.Member", "Member")
                        .WithMany("MemberSessions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagementDAL.Entities.Session", "Session")
                        .WithMany("MemberSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Membership", b =>
                {
                    b.HasOne("GymManagementDAL.Entities.User.Member", "Member")
                        .WithMany("Memberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagementDAL.Entities.Plan", "Plan")
                        .WithMany("Memberships")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Session", b =>
                {
                    b.HasOne("GymManagementDAL.Entities.Category", "Category")
                        .WithMany("Sessions")
                        .HasForeignKey("CategrotyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagementDAL.Entities.User.Trainer", "SessionTrainer")
                        .WithMany("TrainerSessions")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SessionTrainer");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.User.Member", b =>
                {
                    b.OwnsOne("GymManagementDAL.Entities.User.Address", "Address", b1 =>
                        {
                            b1.Property<int>("MemberId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("City");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Street");

                            b1.HasKey("MemberId");

                            b1.ToTable("Members");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagementDAL.Entities.User.Trainer", b =>
                {
                    b.OwnsOne("GymManagementDAL.Entities.User.Address", "Address", b1 =>
                        {
                            b1.Property<int>("TrainerId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("City");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Street");

                            b1.HasKey("TrainerId");

                            b1.ToTable("Trainers");

                            b1.WithOwner()
                                .HasForeignKey("TrainerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Category", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Plan", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Session", b =>
                {
                    b.Navigation("MemberSessions");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.User.Member", b =>
                {
                    b.Navigation("HealthRecord")
                        .IsRequired();

                    b.Navigation("MemberSessions");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.User.Trainer", b =>
                {
                    b.Navigation("TrainerSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
